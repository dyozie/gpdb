---
title: Removing Extraneous Entries
---

Except for persistent tables, all Greenplum Database catalog tables should have same values on all segments. `gpcheckcat` displays an error message if there is an extraneous value in a catalog table on a segment. Follow this procedure to identify and then resolve extraneous catalog entries.

## Prerequisites

- If you are using Pivotal Greenplum Database, contact Pivotal Support to resolve any problems discovered with the system catalog.

    <div class="note warning">This procedure is intended only for users of the open source Greenplum Database software, or for Pivotal Greenplum Database customers who cannot allow Pivotal Support to directly access their systems or data. <br/><br/>Changes to Pivotal Greenplum Database system catalog tables or views are not supported.</div>

- If you have identified multiple catalog problems with `gpcheckcat`, fix any duplicate entry errors or inconsistency errors *before* you follow this procedure. See [Fixing Problems with Greenplum System Catalogs](process.html).

- Perform a full backup of your database before you perform this procedure.

## Scope

In this procedure you will first confirm that extraneous entries exist in the system catalog. You will then run SQL queries to determine and confirm which Greenplum segment has the extra entry. After determining which segment is affected, you will backup the system table and then remove the extra entry from the segment.

## Procedure

1. Execute `gpcheckcat -R missing_extraneous <dbname>` and examine the output. Confirm that the output indicates one or more extraneous entries. For example, the following `gpcheckcat` output shows extraneous entries in the `pg_attribute` table, indicated by the value `extra` in the `exists` column:

    ``` bash
    20160706:14:24:32:020381 gpcheckcat:mdw:gpadmin-[ERROR]:- pg_attribute has 8 issue(s)
     attrelid | attname | exists | segids
     90600133 | xmin | extra | {0}
     90600133 | ctid | extra | {0}
     90600133 | xmax | extra | {0}
     90600133 | tableoid | extra | {0}
     90600133 | cmax | extra | {0}
     90600133 | gp_segment_id | extra | {0}
     90600133 | id | extra | {0}
     90600133 | cmin | extra | {0}
    20160706:14:24:33:020381 gpcheckcat:mdw:gpadmin-[ERROR]:- pg_class has 1 issue(s)
     oid | exists | segids
     90600133 | extra | {0}
    ```
    The above output shows a problem with extra entries for the `attrelid` value 90600133 on segment 0.

    **Note:** Extraneous entries can also be observed as "relation already exists" errors that occur when you execute DDL or DML statements. For example:

    ``` sql
    gpadmin=# SCREATE TABLE test1 (id int) DISTRIBUTED BY (id) ;
    ```
    ``` sql
    ERROR: relation "test1" already exists (seg0 sdw1:46000 pid=11415)
    ```

2. Record the `attrelid` of the problem entry from the `gpcheckcat` output (90600133 in the above example), as well as the `segids` value where the problem occurred.

3. Login to the Greenplum Database master segment as the `gpadmin` user.

4. Reindex the affected catalog table (`pg_attribute` in the current example):

    ``` sql
    gpadmin=# REINDEX TABLE pg_attribute; 
    ```

5. As the `gpadmin` user, connect to the affected segment in utility mode and execute a query to determine or verify the table that contains the extraneous entries:

    ``` bash
    $ PGOPTIONS='-c gp_session_role=utility' psql -h <segment_host> -p <segment_port> gpadmin -c "SELECT n.nspname||'.'||p.relname FROM p
    ```
    ``` sql
     ?column?
    ---------------------
     public.test1
    (1 row)
    ```

    Substitute the `<segment_host>`, `<segment_port>` for your system.
    
    <br/>The sample output above confirms that the `public.test1` table is affected.

6. Check the count of the table on the current segment to see if the data is accessible:

    ``` bash
    $ PGOPTIONS='-c gp_session_role=utility' psql -h <segment_host> -p <segment_port> gpadmin -c "SELECT count(*) FROM <table_name>"
    ```

    Substitute the `<segment_host>`, `<segment_port>` for your system, and `<table_name>` for the affected table. For example:

    ``` bash
    $ PGOPTIONS='-c gp_session_role=utility' psql -h sdw1 -p 46000 gpadmin -c "SELECT count(*) FROM public.test1"
    ```
    ``` sql
     count
    -------
     453
    (1 row)
    ```

7. Execute the same query to determine the count of the table on the master segment. Because the table was reindexed, a failure to obtain rows on master confirms that the segment contains the extra rows.  For example:

    ``` bash
    $ SELECT count(*) FROM public.test1;
    ```
    ``` sql
    ERROR: relation "public.test1" does not exist
    LINE 1: SELECT count(*) FROM public.test1;
    ```

    Here, the fact that the table does not exist on master indicates that the extra rows on the affected segment need to be corrected.

8. Begin by taking a full backup of all catalog tables affected by the missing entry:

    1. First, use the `\d+ <table_name>` command to determine whether the affected table has an OID column. For example:

        ``` sql
        gpadmin=# \d+ pg_attribute
        ```
        ``` sql
         Table "pg_catalog.pg_attribute"
         Column | Type | Modifiers | Storage | Description
        ---------------+----------+-----------+---------+-------------
         attrelid | oid | not null | plain |
         attname | name | not null | plain |
        .
        .
         attinhcount | integer | not null | plain |
        Indexes:
         "pg_attribute_relid_attnam_index" UNIQUE, btree (attrelid, attname)
         "pg_attribute_relid_attnum_index" UNIQUE, btree (attrelid, attnum)
        Has OIDs: no
        
        ```

        Look for the `Has OIDS` line in the output.

    2. Connect using utility mode to the segment that exhibits the problem:
    
        ``` bash
        $ PGOPTIONS='-c gp_session_role=utility' psql -h <hostname> -p <port> gpadmin
        ```
    
    3. Backup the affected catalog table. If the table has an OID column, use the command:

        ``` sql
        gpadmin=# COPY (SELECT oid, * from <table_name>) to '/tmp/<table_name>_gpadmin_<port>_<date>';
        ```

        If the catalog table does not have an OID column, use the command:

        ``` sql
        gpadmin=# COPY <table_name> to '/tmp/<table_name>_gpadmin_<port>_<date>';
        ```

        Because the example catalog in this procedure has no OID column, the copy command would be similar to:

        ``` sql
        gpadmin=# COPY pg_attribute to '/tmp/pg_class_gpadmin_46000_20180627';
        ```

10. To remove the extra entry, log into the affected segment in utility mode and delete only the extraneous entry from the catalog table. For example:

    ``` bash
    gpadmin@mdw# PGOPTIONS='-c gp_session_role=utility' psql -h sdw1 -p 46000 gpadmin -c "set allow_system_table_mods=dml ; DELETE FROM pg_attribute WHERE attrelid=90600133 ;"
    ```

    The above command assumes that `attrelid` value 90600133 is the only extra value in `pg_attribute`.

11. Re-run `gpcheckcat -R missing_extraneous <dbname>` to confirm that you resolved the extraneous entry error.
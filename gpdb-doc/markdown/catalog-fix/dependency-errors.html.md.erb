---
title: Fixing Dependency Errors
---

`gpcheckcat` output can sometimes report dependency-related errors. The most typical type of dependency error involves orphaned entries in the catalog tables `pg_depend` or `pg_shdepend`. Often, `gpcheckcat` output (including verbose output) provides no information about the orphaned entries that need to be removed in order to to address dependency errors. Follow the steps in this procedure to dependency-related errors.

## Prerequisites

- If you are using Pivotal Greenplum Database, contact Pivotal Support to resolve any problems discovered with the system catalog.

    <div class="note warning">This procedure is intended only for users of the open source Greenplum Database software, or for Pivotal Greenplum Database customers who cannot allow Pivotal Support to directly access their systems or data. <br/><br/>Changes to Pivotal Greenplum Database system catalog tables or views are not supported.</div>

- Use `gpcheckcat -R dependency` to verify that your system catalog contains dependency errors.

- If you have identified multiple catalog problems with `gpcheckcat`, fix any duplicate entry errors, inconsistency errors, missing entry errors, or extraneous entry errors *before* you follow this procedure. See [Fixing Problems with Greenplum System Catalogs](process.html).

- Perform a full backup of your database before you perform this procedure.

## Scope

In this procedure you will first confirm that dependency errors exist in the system catalog, and to determine which segment is affected by the problem. You will then run SQL queries on the segment to obtain a list of the orphaned entries that must be repaired. After determining the orphaned entries, you will backup the system table and then remove the orphaned entries to resolve the problem.

## Procedure

1. First, execute a verbose `gpcheckcat` command to check only dependency-related issues:

    ``` bash
    $ gpcheckcat -v -R dependency  -p <port> template1
    ```

3. Download and execute this [dep.sql](dep.sql) file on each affected segment, and save the output. For example:

    ``` bash
    $ PGOPTIONS='-c gp_session_role=utility' psql  -h <segment_host> -p <segment_port>  <dbname> -f dep.sql > dep.out
    ```

4. Look through the `dep.sql` file output to determine the list of orphaned entries. This is the list of entries you will first back up and then remove.

5. For each orphaned entry you discovered, follow this procedure to first back up and then remove the entry from an affected segment:

    1. Connect to the affected instance in utility mode:

        ``` bash
        $ PGOPTIONS='-c gp_session_role=utility' psql  -h <segment_host> -p <segment_port>  <dbname>
        ```

    2. Backup each orphaned entry present in the `pg_depend` and `pg_shdepend` tables:

        ``` sql
        gpadmin=# select * from pg_depend where objid in (xxx,xxx)) to '/tmp/segxxx_dep.out';
        gpadmin=# select * from pg_shdepend where objid in (xxx,xxx)) to '/tmp/segxxx_shdep.out';
        ```

        Replace `xxx` with the OIDs of the orphaned entries you discovered in previous steps.

    3. Enable system table DML operations:

        ``` sql
        gpadmin=# set allow_system_table_mods=DML;
        ```

    4. Delete each orphaned entry from the `pg_depend` and `pg_shdepend` tables:

        ``` sql
        gpadmin=# delete from pg_depend where objid in (xxx,xxx));
        gpadmin=# select from pg_shdepend where objid in (xxx,xxx));
        ```

        Replace `xxx` with the OIDs of the orphaned entries you discovered in previous steps.

    5. Repeat these steps to remove the orphaned entries from any other affected segments.

6. Repeat Step 3 to determine if any orphaned entries still remain on affected segments. If additional records are returned, repeat the procedure in Step 5 to backup and remove the entries.

7. After the `dep.sql` output shows no records returned, re-run `gpcheckcat` to validate that dependency issues were resolved in the Greenplum cluster as a whole:

    ``` bash
    $ gpcheckcat -R dependency
    ```
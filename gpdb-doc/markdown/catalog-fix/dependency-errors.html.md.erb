---
title: Fixing Dependency Errors in Catalog Tables
---

`gpcheckcat` output can sometimes report dependency-related errors. The most typical type of dependency error involves orphaned entries in the catalog tables `pg_depend` or `pg_shdepend`. Often, `gpcheckcat` output (including verbose output) provides no information about the orphaned entries that need to be removed in order to to address dependency errors. Follow the steps in this procedure to dependency-related errors.

## Prerequisites

- If you are using Pivotal Greenplum Database, contact Pivotal Support to resolve any problems discovered with the system catalog. This procedure is intended only for users of the open source Greenplum Database software, or for Pivotal Greenplum Database customers who cannot allow Pivotal Support to directly access their systems or data.

- Use `gpcheckcat` to verify that your system catalog contains dependency errors. See [Resolving System Catalog Issues](resolve-catalog-issues.html) for a list of common symptoms.

- If you have identified multiple catalog problems with `gpcheckcat`, fix any duplicate entry errors, inconsistency errors, missing entry errors, or extraneous entry errors *before* you follow this procedure. See [FIXME](fixme.html).

- Perform a full backup of your database before you perform this procedure.

## Procedure

1. First, execute a verbose `gpcheckcat` command to check only dependency-related issues:

    ``` bash
    $ gpcheckcat -v -R dependency  -p <port> template1
    ```

2. Examine the `gpcheckcat` output to determine which segment(s) are affected by dependency-related issues.  Record a list of these segments.

2. For dependency-related errors, `gpcheckcat` generates a verification file with the `.sql` extension to provide further information. The file is created in the `/home/gpadmin/gpAdminLogs` directory. Execute the verification file on each affected segment, and save the output.

3. As an alternative to running the verification file (or if no verification file is created), execute this [dep.sql](dep.sql) file on each affected segment, and save the output. For example:

    ``` bash
    $ PGOPTIONS='-c gp_session_role=utility' psql  -h <segment_host> -p <segment_port>  <dbname> -f dep.sql > dep.out

4. Look through the verification file output and/or the `dep.sql` file output to determine the list of orphaned entries. This is the list of entries you will first back up and then remove.

5. For each orphaned entry you discovered, follow this procedure to first back up and then remove the entry from an affected segment:

    1. Connect to the affected instance in utility mode:

        ``` bash
        $ PGOPTIONS='-c gp_session_role=utility' psql  -h <segment_host> -p <segment_port>  <dbname>
        ```

    2. Backup each orphaned entry present in the `pg_depend` and `pg_shdepend` tables:

        ``` sql
        =# select * from pg_depend where objid in (xxx,xxx)) to '/tmp/segxxx_dep.out';
        =# select * from pg_shdepend where objid in (xxx,xxx)) to '/tmp/segxxx_shdep.out';
        ```

        Replace `xxx` with the OIDs of the orphaned entries you discovered in previous steps.

    3. Enable system table DML operations:

        ``` sql
        =# set allow_system_table_mods=DML;
        ```

    4. Delete each orphaned entry from the `pg_depend` and `pg_shdepend` tables:

        ``` sql
        =# delete from pg_depend where objid in (xxx,xxx));
        =# select from pg_shdepend where objid in (xxx,xxx));
        ```

        Replace `xxx` with the OIDs of the orphaned entries you discovered in previous steps.

    5. Repeat these steps to remove the orphaned entries from any other affected segments.

6. Repeat Step 3 to determine if any orphaned entries still remain on affected segments. If additional records are returned, repeat the procedure in Step 5 to backup and remove the entries.

7. After the `dep.sql` output shows no records returned, re-run `gpcheckcat` to validate that dependency issues were resolved in the Greenplum cluster as a whole.
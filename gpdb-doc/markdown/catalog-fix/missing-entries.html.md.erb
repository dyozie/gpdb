---
title: Restoring Missing Entries
---

Except for persistent tables, all Greenplum Database catalog tables should have same values on all segments. `gpcheckcat` displays an error message if an expected value is missing from a catalog table on a segment. Follow this procedure to identify and then resolve missing catalog entries.

## Prerequisites

- If you are using Pivotal Greenplum Database, contact Pivotal Support to resolve any problems discovered with the system catalog.

    <div class="note warning">This procedure is intended only for users of the open source Greenplum Database software, or for Pivotal Greenplum Database customers who cannot allow Pivotal Support to directly access their systems or data. <br/><br/>Changes to Pivotal Greenplum Database system catalog tables or views are not supported.</div>

- If you have identified multiple catalog problems with `gpcheckcat`, fix any duplicate entry errors or inconsistency errors *before* you follow this procedure. See [Fixing Problems with Greenplum System Catalogs](process.html).

- Perform a full backup of your database before you perform this procedure.

## Scope

In this procedure you will first confirm that missing entries exist in the system catalog. You will then run SQL queries to determine and confirm which Greenplum segment is missing the entry. After determining which segment is affected, you will backup the system table and then copy the necessary entry from a healthy segment instance.

## Procedure

1. Execute `gpcheckcat -R missing_extraneous <dbname>` and examine the output. Confirm that the output indicates one or more missing entries. For example, the following `gpcheckcat` output shows missing entries in the `pg_attributes` table, indicated by the value `missing` in the `exists` column:

    ``` bash
    20160706:14:05:25:019054 gpcheckcat:mdw:gpadmin-[INFO]:-[FAIL] Checking for missing or extraneous entries for pg_attribute
    20160706:14:05:25:019054 gpcheckcat:mdw:gpadmin-[ERROR]:- pg_attribute has 9 issue(s)
     attrelid | attname | exists | segids
     90592940 | xmax | missing | {0}
     90592940 | ctid | missing | {0}
     90592940 | cmin | missing | {0}
     90592940 | cmax | missing | {0}
     90592940 | gp_segment_id | missing | {0}
     90592940 | id | missing | {0}
     90592940 | id1 | missing | {0}
     90592940 | tableoid | missing | {0}
     90592940 | xmin | missing | {0}
    ```
    The above output shows a problem with missing entries for the `attrelid` value 90592940 on segment 0 (master).

    <br/>**Note:** Missing entries can also be observed as "missing attribute(s)" errors that occur when you execute DDL or DML statements. For example:

    ``` sql
    gpadmin=# SELECT * FROM test ; 
    ```
    ``` sql
    WARNING: cdbRelSize error (gathered 8 results from cmd 'select pg_relation_size('public.test2')')
    DETAIL: catalog is missing 2 attribute(s) for relid 90592940 (relcache.c:961) (seg0 sdw1:46000 pid=20202)
    ERROR: catalog is missing 2 attribute(s) for relid 90592940 (relcache.c:961) (seg0 slice1 sdw1:46000 pid=20202) (cdbdisp.c)
    ```

    The above error also shows missing entries for the `attrelid` value 90592940 on segment 0 (master).

3. Record the `attrelid` of the problem entry from the `gpcheckcat` output (90592940 in the above example), as well as the `segids` value where the problem occurred.

4. Login to the Greenplum Database master segment as the `gpadmin` user.

5. Reindex the affected table. For example:

    ``` sql
    gpadmin=# REINDEX TABLE pg_attribute; 
    ```

6. Execute the following query to determine the table name associated with the `attrelid` you recorded in Step 3:

    ``` sql
    gpadmin=# SELECT n.nspname||'.'||p.relname FROM <system_table> p, pg_namespace n WHERE p.relnamespace=n.oid and p.oid=<attrelid>;
    ```

    For example, previous example output indicated that a problem with the `pg_attribute` table and `attrelid` 90592940:

    ``` sql
    gpadmin=# SELECT n.nspname||'.'||p.relname FROM pg_class p, pg_namespace n WHERE p.relnamespace=n.oid and p.oid=90592940 ;
    ```
    ``` sql
     ?column?
    ---------------------
     public.test
    (1 row)
    ```

    If a table name is returned (`public.test` in the above example), then you can use the table for data access, or you can backup the table data prior to resolving the catalog problem.

7. Check the row count for the missing entry on all segments to confirm that the problem exists on the segment that you recorded earlier (`segids` value 0, the master segment, in this example scenario):

    1. First, use the following query to determine the expected row count for the entry:

        ``` sql
        gpadmin=# SELECT count(*) FROM <system_table> WHERE attrelid=<attrelid>;
        ```

        For example:

        ``` sql
        gpadmin=# SELECT count(*) from pg_attribute WHERE attrelid=90592940;
        ```
        ``` sql
         count
        -------
         38
        (1 row)
        ```

    2. Next, calculate and display the row count available on all segments with the query:

        ``` sql
        gpadmin=# SELECT gp_segment_id, count(*) from gp_dist_random('<system_table>') WHERE attrelid=<attrelid>;
        ```

        For example: 

        ``` sql
        gpadmin=# SELECT gp_segment_id,count(*) from gp_dist_random('pg_attribute') WHERE attrelid=90592940 GROUP BY 1;
        ```
        ``` sql
         gp_segment_id | count
        ---------------+-------
                     1 |    38
        (1 row)
        ```

        In the above example, only segment 1 shows the expected row count.  Segment 0 (the master segment) is missing from the output, so segment 0 is confirmed as the problem segment.

        <br/>**Note** In some cases, the problem segment may appear in the output but show a row count that is greater than or less than the expected count value.  

8. A second way to confirm the problem segment is to query and insert data on the affected table to see determine if the missing entry error occurs. Be sure to perform any inserts within a transaction that you roll back, so that you do not actually modify the table. For example:

    ``` sql
    gpadmin=# COPY  public.test to '/dev/null' ;
    begin ;
    Insert into  public.test select * from public.test limit 10 ;
    rollback ;
    ```

    If the error repeats during data access and count validation, then you have confirmed the entry is missing and it is safe to proceed with the fixes described in this procedure.

9. Begin by taking a full backup of all catalog tables affected by the missing entry:

    1. First, use the `\d+ <table_name>` command to determine whether the affected table has an OID column. For example:

        ``` sql
        gpadmin=# \d+ pg_class
        ```
        ``` sql
                           Table "pg_catalog.pg_class"
             Column     |   Type    | Modifiers | Storage  | Description
        ----------------+-----------+-----------+----------+-------------
         relname        | name      | not null  | plain    |
         relnamespace   | oid       | not null  | plain    |
         .
         .
         relacl         | aclitem[] |           | extended |
         reloptions     | text[]    |           | extended |
        Indexes:
            "pg_class_oid_index" UNIQUE, btree (oid)
            "pg_class_relname_nsp_index" UNIQUE, btree (relname, relnamespace)
        Has OIDs: yes        
        ```

        Look for the `Has OIDS` line in the output.

    2. Connect using utility mode to the segment that exhibits the problem:
    
        ``` bash
        $ PGOPTIONS='-c gp_session_role=utility' psql -h <hostname> -p <port> gpadmin
        ```
    
    3. Backup the affected catalog table. If the table has an OID column, use the command:

        ``` sql
        gpadmin=# COPY (SELECT oid, * from <table_name>) to '/tmp/<table_name>_gpadmin_<port>_<date>';
        ```

        If the catalog table does not have an OID column, use the command:

        ``` sql
        gpadmin=# COPY <table_name> to '/tmp/<table_name>_gpadmin_<port>_<date>';
        ```

        Because the example catalog in this procedure has an OID column, the copy command would be similar to:

        ``` sql
        gpadmin=# COPY (SELECT oid, * from pg_class ) to '/tmp/pg_class_gpadmin_46000_20180627';
        ```

10. To correct entries that are missing from the catalog on a segment, you copy entries from a segment that contains all of entries for that catalog.

       <br/>**FIXME:  commands were truncated and referenced the wrong system table.**

       ``` sql 
       gpadmin@mdw# PGOPTIONS='-c gp_session_role=utility' psql -h sdw1 -p 46001 gpadmin -c "COPY (SELECT * FROM pg_attribute WHERE
       COPY 38
       gpadmin@mdw# PGOPTIONS='-c gp_session_role=utility' psql -h sdw1 -p 46000 gpadmin -c "set       allow_system_table_mods=dml ; DELE
       COPY
       ```